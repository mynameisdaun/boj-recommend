<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.daun.word.domain.recommend.domain.repository.RecommendRepository">

    <resultMap id="recommendMap" type="Recommend">
        <constructor>
            <idArg column="id" name="id"/>
            <arg column="problem_id" name="problem" javaType="Problem"
                 select="com.daun.word.domain.problem.domain.repository.ProblemRepository.findById"/>
            <arg column="email" name="member" javaType="Member"
                 select="com.daun.word.domain.member.domain.repository.MemberRepository.findByEmail"/>
            <arg column="recommended_count" name="recommendedCount"/>
            <arg column="choose_yn" name="chooseYn" javaType="YesNo" typeHandler="YesNoTypeHandler"/>
            <arg column="choose_date_time" name="chooseDateTime" javaType="LocalDateTime"/>
            <arg column="created_at" name="createdAt" javaType="LocalDateTime"/>
            <arg column="updated_at" name="updatedAt" javaType="LocalDateTime"/>
        </constructor>
    </resultMap>

    <insert id="save" parameterType="Recommend" useGeneratedKeys="true" keyColumn="id" keyProperty="recommend.id">
        insert into recommend
        (
        problem_id,
        email
        <if test="recommend.id != null">
            ,id
            ,recommended_count
            ,choose_yn
            ,choose_date_time
        </if>
        )
        values
        (
        #{recommend.problem.id},
        #{recommend.member.email}
        <if test="recommend.id != null">
            ,#{recommend.id}
            ,#{recommend.recommendedCount}
            ,#{recommend.chooseYn}
            ,#{recommend.chooseDateTime}
        </if>
        )
        on duplicate key update
        problem_id = #{recommend.problem.id},
        email = #{recommend.member.email},
        recommended_count = #{recommend.recommendedCount},
        choose_yn = #{recommend.chooseYn},
        choose_date_time = #{recommend.chooseDateTime},
        updated_at = sysdate()
        <selectKey keyColumn="id,created_at,updated_at"
                   keyProperty="recommend.id,recommend.createdAt,recommend.updatedAt"
                   resultType="java.util.HashMap" order="AFTER">
            select
            r.id,
            r.created_at,
            r.updated_at
            from recommend as r
            WHERE r.id =
            <if test="recommend.id != null">
                #{recommend.id}
            </if>
            <if test="recommend.id == null">
                LAST_INSERT_ID()
            </if>
        </selectKey>
    </insert>

    <select id="findById" resultMap="recommendMap">
        select r.id,
               r.problem_id,
               r.email,
               r.recommended_count,
               r.choose_yn,
               r.choose_date_time,
               r.created_at,
               r.updated_at
        from recommend as r
        where r.id = #{recommendId.value}
    </select>

    <select id="findByMemberAndProblem" resultMap="recommendMap">
        select r.id,
               r.problem_id,
               r.email,
               r.recommended_count,
               r.choose_yn,
               r.choose_date_time,
               r.created_at,
               r.updated_at
        from recommend as r
        where r.email = #{member.email}
          and r.problem_id = #{problem.id.value}
    </select>

    <select id="findByMemberAndProblems" resultMap="recommendMap">
        select
        r.id,
        r.problem_id,
        r.email,
        r.recommended_count,
        r.choose_yn,
        r.choose_date_time,
        r.created_at,
        r.updated_at
        from recommend as r
        where r.email = #{member.email}
        and r.problem_id in
        <foreach item="problem" collection="problems" open="(" separator="," close=")">
            #{problem.id}
        </foreach>
    </select>

    <select id="findByMembersWhereCreatedBefore" resultMap="recommendMap">
        select r.id,
        r.problem_id,
        r.email,
        r.recommended_count,
        r.choose_yn,
        r.choose_date_time,
        r.created_at,
        r.updated_at
        from recommend as r
        where r.email in
        <foreach item="member" collection="members" open="(" separator="," close=")">
            #{member.email}
        </foreach>
        <![CDATA[
          and r.updated_at >= #{date}
        ]]>
    </select>
</mapper>
