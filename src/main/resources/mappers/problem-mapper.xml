<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.daun.word.domain.problem.domain.repository.ProblemRepository">

    <resultMap id="problemMap" type="Problem">
        <constructor>
            <idArg column="globalId" name="globalId"/>
            <arg column="title" name="title" javaType="Title"/>
            <arg column="url" name="url" javaType="URL"/>
            <arg column="tier" name="tier" javaType="Tier"/>
            <arg column="globalId" name="tags" javaType="List" select="findTags"/>
            <arg column="accepted_user_count" name="acceptedUserCount"/>
            <arg column="recommended_count" name="recommendedCount"/>
            <arg column="created_at" name="createdAt" javaType="LocalDateTime"/>
            <arg column="updated_at" name="updatedAt" javaType="LocalDateTime"/>
        </constructor>
    </resultMap>

    <resultMap id="tagMap" type="Tag">
        <constructor>
            <idArg column="globalId" name="globalId"/>
            <arg column="tag_key" name="key" javaType="String"/>
            <arg column="title" name="title" javaType="Title"/>
            <arg column="created_at" name="createdAt" javaType="LocalDateTime"/>
            <arg column="updated_at" name="updatedAt" javaType="LocalDateTime"/>
        </constructor>
    </resultMap>

    <select id="findById" resultMap="problemMap">
        SELECT p.globalId,
               p.title,
               p.url,
               p.tier,
               p.accepted_user_count,
               p.recommended_count,
               p.created_at,
               p.updated_at
        FROM problem p
        where p.globalId = ${problemGlobalId.value}
    </select>

    <select id="findByIdIn" resultMap="problemMap">
        SELECT p.globalId,
        p.title,
        p.url,
        p.tier,
        p.accepted_user_count,
        p.recommended_count,
        p.created_at,
        p.updated_at
        FROM problem as p
        where p.globalId in
        <foreach item="globalId" collection="globalId" open="(" separator="," close=")">
            #{globalId.value}
        </foreach>
    </select>

    <select id="findByTierBetweenOrderBySolvedCountDesc" resultMap="problemMap">
        SELECT p.globalId,
               p.title,
               p.url,
               p.tier,
               p.accepted_user_count,
               p.recommended_count,
               p.created_at,
               p.updated_at
        FROM problem p
        <![CDATA[
        where p.tier >= ${goe.level}
          and ${loe.level} >= p.tier
        ]]>
          order by p.accepted_user_count desc
        limit #{limit} offset #{offset}
    </select>

    <select id="findTags" resultMap="tagMap">
        SELECT t.globalId,
               t.tag_key,
               t.title,
               t.created_at,
               t.updated_at
        FROM problem_tag pt
                 left join problem p on pt.problem_id = p.globalId
                 left join tag t on pt.tag_id = t.globalId
        where p.globalId = ${globalId}
    </select>

    <insert id="save" parameterType="Problem" useGeneratedKeys="true" keyColumn="globalId" keyProperty="problem.globalId">
        INSERT INTO problem
        (
        globalId,
        title,
        url,
        tier,
        accepted_user_count,
        recommended_count
        )
        VALUES
        (
        #{problem.globalId},
        #{problem.title},
        #{problem.url},
        #{problem.tier},
        #{problem.acceptedUserCount},
        #{problem.recommendedCount}
        )
        ON DUPLICATE KEY UPDATE
        title = #{problem.title},
        url = #{problem.url},
        tier = #{problem.tier},
        accepted_user_count = #{problem.acceptedUserCount},
        recommended_count = #{problem.recommendedCount}
        <selectKey keyColumn="created_at,updated_at"
                   keyProperty="problem.createdAt,problem.updatedAt"
                   resultType="java.util.HashMap" order="AFTER">
            SELECT
            p.created_at,
            p.updated_at
            FROM problem p
            where p.globalId = #{problem.globalId};
        </selectKey>
    </insert>

    <insert id="saveTag" parameterType="Tag" useGeneratedKeys="true" keyColumn="globalId" keyProperty="tag.globalId">
        INSERT INTO tag
        (
        globalId,
        tag_key,
        title
        )
        VALUES
        (
        #{tag.globalId},
        #{tag.key},
        #{tag.title}
        )
        ON DUPLICATE KEY UPDATE
        tag_key = #{tag.key},
        title = #{tag.title.value}
        <selectKey keyColumn="created_at,updated_at"
                   keyProperty="tag.createdAt,tag.updatedAt"
                   resultType="java.util.HashMap" order="AFTER">
            SELECT
            t.created_at,
            t.updated_at
            FROM tag t
            where t.globalId = #{tag.globalId};
        </selectKey>
    </insert>

    <insert id="saveProblemTag">
        INSERT INTO problem_tag
        (pk,
         problem_id,
         tag_id)
        VALUES (CONCAT(#{problemGlobalId.value}, '-', #{tagGlobalId.value}),
                #{problemGlobalId.value},
                #{tagGlobalId.value})
        ON DUPLICATE KEY UPDATE problem_id = #{problemGlobalId.value},
                                tag_id     = #{tagGlobalId.value}
    </insert>

    <select id="countByGroup" resultType="ProblemCount">
        select count(*) as count,
               p.tier   as level
        from problem as p
        group by p.tier
        order by p.tier asc
    </select>
</mapper>
