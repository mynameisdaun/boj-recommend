<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.daun.word.global.auth.token.domain.repository.TokenRepository">
    <insert id="save" parameterType="com.daun.word.global.auth.token.domain.Token">
        /* 토큰 생성 */
        INSERT INTO token
        (
        member_email,
        access_token,
        access_token_expired_date,
        refresh_token,
        refresh_token_expired_date,
        member_social_type,
        social_access_token,
        social_access_token_expired_date,
        social_refresh_token,
        social_refresh_token_expired_date
        )
        VALUES
        (
        #{token.memberEmail.value},
        #{token.accessToken},
        #{token.accessTokenExpiredDate},
        #{token.refreshToken},
        #{token.refreshTokenExpiredDate},
        #{token.memberSocialType},
        #{token.socialAccessToken},
        #{token.socialAccessTokenExpiredDate},
        #{token.socialRefreshToken},
        #{token.socialRefreshTokenExpiredDate}
        )
        ON DUPLICATE KEY UPDATE
        access_token = #{token.accessToken},
        access_token_expired_date = #{token.accessTokenExpiredDate},
        refresh_token = #{token.refreshToken},
        refresh_token_expired_date = #{token.refreshTokenExpiredDate},
        member_social_type = #{token.memberSocialType},
        social_access_token = #{token.socialAccessToken},
        social_access_token_expired_date = #{token.socialAccessTokenExpiredDate},
        social_refresh_token = #{token.socialRefreshToken},
        social_refresh_token_expired_date = #{token.socialRefreshTokenExpiredDate},
        updated_at = SYSDATE()
        <selectKey keyColumn="createdAt,updatedAt" keyProperty="createdAt,updatedAt"
                   resultType="java.util.HashMap" order="AFTER">
            SELECT created_at as createdAt,
            updated_at as updatedAt
            FROM token
            WHERE token.member_email =#{token.memberEmail.value}
        </selectKey>
    </insert>

    <select id="findByEmail" resultType="com.daun.word.global.auth.token.domain.Token">
        /* 멤버 ID(구분값)으로 토큰 조회 */
        SELECT member_email,
               access_token,
               access_token_expired_date,
               refresh_token,
               refresh_token_expired_date,
               member_social_type,
               social_access_token,
               social_access_token_expired_date,
               social_refresh_token,
               social_refresh_token_expired_date,
               created_at,
               updated_at
        FROM token
        where token.member_email = #{email.value}
    </select>
</mapper>
